id: productRowUpdated
type: datasource
subtype: JavascriptQuery
resourceName: JavascriptQuery
template:
  ordered:
    - queryRefreshTime: ''
    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - servedFromCache: false
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - resourceNameOverride: ''
    - runWhenModelUpdates: false
    - showFailureToaster: true
    - query: >-
        const isProductAvailable = checkbox_availableProduct[i].value;

        const isProductIncluded = checkbox_includeProduct[i].value;

        const productId = queryVariationsView.data.available[i].id;

        const productName = queryVariationsView.data.available[i].name;

        const productGroupId = urlparams.id;

        const productVariationId = queryVariationsView.data.variationId;

        const productAmount = checkbox_includeProduct[i].value ?
        currency_includedProductAmount[i].value :
        currency_includedProductAmount2.value;

        const productBundleId = queryVariationsView.data.bundleId;


        //if we have a product id, then this is an update

        if ((productId !== undefined) && (isProductAvailable ||
        isProductIncluded)) {
          console.log('!!!!!!! update product: ', productId);
          return queryUpdateIncludedAvailableInBundle.trigger({
            additionalScope: {
              productAmount,
              isProductIncluded,
              isProductAvailable,
              productGroupId,
              productVariationId,
              productBundleId,
              productId,
              productName
            }
          })
        }


        //first time creating a product

        if (!productId && isProductAvailable || isProductIncluded) {
          console.log('!!!!!!! create new product');
          return queryCreateProduct.trigger({
            additionalScope: {
              productAmount,
              isProductIncluded,
              isProductAvailable,
              productGroupId,
              productVariationId,
              productBundleId,
              productName
            }
          })
        }


        //we want to remove a product

        if (productId && !isProductAvailable && !isProductIncluded) {
          console.log('!!!!!!! delete product: ', productId);
          return queryDeleteProduct.trigger({
            additionalScope: {
              productId
            }
          })
        }


        queryVariationsView.trigger();

        return Promise.reject("Invalid Operation. Please select include or
        available");
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - error: null
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: true
    - cacheKeyTtl: ''
    - requestSentTimestamp: null
    - metadata: null
    - queryRunTime: null
    - changesetObject: ''
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - finished: null
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: null
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events: []
    - queryTimeout: '10000'
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - offlineQueryType: None
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2022-11-16T01:30:27.348Z
