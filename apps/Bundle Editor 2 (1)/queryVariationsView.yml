id: queryVariationsView
type: datasource
subtype: JavascriptQuery
resourceName: JavascriptQuery
template:
  ordered:
    - queryRefreshTime: ''
    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - servedFromCache: false
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - resourceNameOverride: ''
    - runWhenModelUpdates: false
    - showFailureToaster: true
    - query: >-
        const allProducts = getProductsInOneConfig.data;

        const variations = getVariations.data;

        const bundleIndex = stateBundleIndex.value;

        const variationIndex = stateVariationIndex.value;


        if (!allProducts || !variations || bundleIndex === null ||
        variationIndex === null) return {};


        const variation = variations[variationIndex];

        const bundle = variation.bundles[bundleIndex];


        const overlay = (kind) => 
          p => {
            const prod = bundle.products.find(bp => bp.name === p);
            if(prod){
              console.log('prod: ', prod);
            }
            return {
              id: prod?.id,
              name: p,
              amount: prod?.amount,
              isIncluded: prod?.isIncluded,
              children: prod?.children
            }
        };


        return {
          variationName: variation.name,
          variationId: variation.id,
          bundleName: bundle.name,
          bundleId: bundle.id,
          included: allProducts.map(overlay('included')),
          available: allProducts.map(overlay('available')),
        };
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - error: null
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: true
    - cacheKeyTtl: ''
    - requestSentTimestamp: null
    - metadata: null
    - queryRunTime: null
    - changesetObject: ''
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - finished: null
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: null
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events: []
    - queryTimeout: '10000'
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - offlineQueryType: None
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2022-10-10T18:33:08.042Z
