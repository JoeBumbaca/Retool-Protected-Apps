id: submitTicketRebatch
type: datasource
subtype: RESTQuery
resourceName: 19e3c8a9-ef08-4632-bf20-f0ca0f1f6cba
template:
  ordered:
    - queryRefreshTime: ''
    - paginationLimit: ''
    - body: |-
        {
            "fields": {
               "project":
               {
                  "key": "{{retoolContext.environment === "NP02" ? "TAPT" : (retoolContext.environment === "NP06" ? "TAPT" : "TAPS")}}"
               },
               "reporter": {
                   "accountId": {{getAccount.data.accountId}}
               },
               "summary": "Approvals needed for {{taskTabs.value}}",
               "description": "\r\n||Transaction ID||Before||After||{{partiesTable.data.map(row => "\n|" + row.id + "|" + row.partyType + "|" + row.name)}}\n",
               "issuetype": {
                  "name": "Story"
               },
               "customfield_13395": { "value": "{{taskTabs.value}}"}
           }
        }
    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - successMessage: SUBMIT TICKET RAN
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - resourceNameOverride: ''
    - runWhenModelUpdates: false
    - paginationPaginationField: ''
    - headers: >-
        [{"key":"Content-Type","value":"application/json"},{"key":"Authorization","value":"Basic
        Zm1hcnphbkB5YXBzdG9uZS5jb206Y0ZWMUhSVTJBODZlczBqVHVXR1Y1RTgy"}]
    - showFailureToaster: true
    - paginationEnabled: false
    - query: >-
        ?projectKeys={{retoolContext.environment === "NP02" ? "TAPT" :
        (retoolContext.environment === "NP06" ? "TAPT" : "TAPS")}}/issuetypes
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: false
    - cacheKeyTtl: ''
    - cookies: ''
    - metadata: null
    - changesetObject: ''
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: null
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - paginationDataField: ''
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events:
        - ordered:
            - method: trigger
            - enabled: '{{timeSensitivityChoice.value == "fourChoice"}}'
            - params:
                ordered: []
            - targetId: null
            - pluginId: time_sensitive_alert
            - waitType: debounce
            - event: success
            - type: datasource
            - waitMs: '0'
        - ordered:
            - method: trigger
            - enabled: '{{timeSensitivityChoice.value == "specificChoice"}}'
            - params:
                ordered: []
            - targetId: null
            - pluginId: specific_dateTime_alert
            - waitType: debounce
            - event: success
            - type: datasource
            - waitMs: '0'
        - ordered:
            - method: trigger
            - enabled: '{{timeSensitivityChoice.value == "notSensChoice"}}'
            - params:
                ordered: []
            - targetId: null
            - pluginId: not_time_sensitive_alert
            - waitType: debounce
            - event: success
            - type: datasource
            - waitMs: '0'
        - ordered:
            - event: success
            - type: datasource
            - method: trigger
            - pluginId: getStatus
            - targetId: null
            - params:
                ordered: []
            - waitType: debounce
            - waitMs: '0'
    - queryTimeout: '10000'
    - requireConfirmation: false
    - type: POST
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - bodyType: raw
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2022-06-23T00:25:22.999Z
folder: jiraIntegration
