id: within_4_hours
type: datasource
subtype: JavascriptQuery
resourceName: JavascriptQuery
template:
  ordered:
    - queryRefreshTime: ''
    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - resourceNameOverride: ''
    - runWhenModelUpdates: false
    - showFailureToaster: true
    - query: |
        const now = nowTimestamp.value;
        const timeEnter = timeEntrySOTimestamp.value;
        const timeEnterSpecific = timeEntrySOSpecificTimestamp.value;
        var timeDifference = timeEnter - now;
        var timeDifferenceSpecific = timeEnterSpecific - now;
        const maxDifference = 4 * 60 * 60 * 1000 //make sure is within 4 hours

        if (timeDifference > maxDifference || timeDifference < 0){
          timeSensitiveAlert.open(); 
        }
         
        if (timeDifferenceSpecific < maxDifference){
          specificTimeAlert.open(); 
        }

        // else if(timeSensitivityChoiceSO.value == "specificChoiceSO"){
          
        // }

        // else if(timeSensitivityChoiceSO.value == "notSensChoiceSO"){
          
        // }
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: false
    - cacheKeyTtl: ''
    - metadata: null
    - changesetObject: ''
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: null
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events: []
    - queryTimeout: '10000'
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2022-08-03T23:29:13.210Z
folder: leave_task_notification
