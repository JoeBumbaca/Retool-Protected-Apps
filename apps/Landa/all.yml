id: all
type: datasource
subtype: SqlQueryUnified
resourceName: bd070b5e-3e02-4fbd-b4f3-a519f1f24272
template:
  ordered:
    - queryRefreshTime: ''
    - records: ''
    - lastReceivedFromResourceAt: null
    - databasePasswordOverride: ''
    - queryDisabledMessage: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - resourceNameOverride: ''
    - runWhenModelUpdates: true
    - showFailureToaster: true
    - query: >-
        SELECT t.id::VARCHAR, 

        fi.external_object_id AS property_ticker, 

        t.date_created::DATE AS date_created, 

        CASE WHEN fc_sender.financial_identity_id=fi.id THEN 
        amount_amount::FLOAT * -1 ELSE amount_amount::FLOAT END AS
        amount_amount,

        CASE WHEN tf.rent_payment_id IS NOT NULL THEN 'rent_payment'

        WHEN tf.late_fee_id IS NOT NULL THEN 'late_fee' ELSE
        tf.external_model_type::VARCHAR END category, CASE WHEN
        tf.external_model_type = 'PROPERTY_EXPENSE' THEN tf.external_object_id
        ELSE '' END property_expense_id

        from "transaction" t

        LEFT JOIN financial_connection fc_sender ON fc_sender.id =
        t.sender_financial_connection_id 

        LEFT JOIN financial_connection fc_receiver ON fc_receiver.id =
        t.receiver_financial_connection_id 

        LEFT JOIN financial_identity fi ON fi.id IN
        (fc_sender.financial_identity_id, fc_receiver.financial_identity_id)

        LEFT JOIN transaction_flow tf ON tf.id = t.transaction_flow_id

        WHERE fi.external_model_type = 'PROPERTY' 

        AND t.transaction_status = 'COMPLETE'

        AND (t.date_created <= {{moment(dateRange1.endFormattedString ||
        '01/01/2100').format('YYYY-MM-DD')}}::DATE) AND (t.date_created >=
        {{moment(dateRange1.startFormattedString ||
        '01/01/1970').format('YYYY-MM-DD')}}::DATE)

        AND (tf.rent_payment_id IS NOT NULL
             OR tf.late_fee_id IS NOT NULL
             OR tf.external_model_type IS NOT NULL
            )
        AND fc_sender.financial_identity_id !=
        fc_receiver.financial_identity_id 

        AND fi.external_object_id = {{urlparams.property_ticker}}
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - warningCodes: []
    - data: null
    - recordId: ''
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: true
    - dataArray: []
    - cacheKeyTtl: ''
    - filterBy: ''
    - databaseHostOverride: ''
    - metadata: null
    - editorMode: sql
    - actionType: ''
    - changesetObject: ''
    - shouldUseLegacySql: false
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - databaseNameOverride: ''
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - watchedParams: []
    - enableErrorTransformer: false
    - enableBulkUpdates: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - bulkUpdatePrimaryKey: ''
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events: []
    - tableName: ''
    - queryTimeout: '10000'
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - databaseUsernameOverride: ''
    - shouldEnableBatchQuerying: false
    - doNotThrowOnNoOp: false
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2022-03-24T16:28:20.216Z
folder: financials
