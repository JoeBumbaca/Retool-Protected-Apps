id: classifier
type: datasource
subtype: SqlTransformQuery
resourceName: SQL Transforms
template:
  ordered:
    - queryRefreshTime: ''
    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - resourceNameOverride: ''
    - runWhenModelUpdates: true
    - showFailureToaster: true
    - query: >-
        SELECT t1.account_type AS Account_type,

        (CASE WHEN t1.account_type IN
        ('insurance','management_fee','property_tax',
                                       'plumbing','other','loan_payment',
                                       'roof','monthly_hoa','marketing','PROPERTY_EXPENSE','floor','electricity','legal','utilities') THEN t1.total_amount::FLOAT ELSE NULL END) 
        OR (CASE WHEN t1.account_type IN ('CASH-BANK') AND t1.total_amount>0
        THEN t1.total_amount::FLOAT ELSE NULL END) AS Debit,

        (CASE WHEN t1.account_type IN ('LOAN','rent_payment','late_fee') THEN
        t1.total_amount::FLOAT ELSE NULL END) OR (CASE WHEN t1.account_type IN
        ('CASH-BANK') AND
                                                                                                                           t1.total_amount<0 THEN t1.total_amount::FLOAT*(-1) ELSE NULL
                                                                                                                           END) AS Credit
        FROM {{ concat_full.data }} t1

        WHERE {{select2.value}} = 'Trial Balance'
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: true
    - cacheKeyTtl: ''
    - metadata: null
    - changesetObject: ''
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events: []
    - queryTimeout: '10000'
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2022-03-28T13:04:11.956Z
folder: json
