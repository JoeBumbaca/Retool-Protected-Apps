id: create_property_expense_in_db
type: datasource
subtype: RESTQuery
resourceName: 1b2fcf3b-5591-4034-8eb4-eabf8804c359
template:
  ordered:
    - queryRefreshTime: ''
    - paginationLimit: ''
    - body: >-
        [{"key":"data","value":"{'attributes': {'speed': {{same__day.value}},
        'ticker': {{urlparams.property_ticker}}, 'vendor':
        {{selected_vendor.data['0'].external_object_id}},'amount':{{parseFloat(textInput7.value)}},
        'comment': {{textArea1.value}}, 'payment_type': {{select6.value}},
        'invoice_date': {{date5.value}}, 'invoice_number':
        {{num_invoice.value}}, 'type': 'withdrawal' , 'attachments':
        [{{create_link.data}}]}}"}]
    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - resourceNameOverride: ''
    - runWhenModelUpdates: false
    - paginationPaginationField: ''
    - headers: ''
    - showFailureToaster: true
    - paginationEnabled: false
    - query: api/admin/transactions?
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: true
    - cacheKeyTtl: ''
    - cookies: ''
    - metadata: null
    - changesetObject: ''
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - paginationDataField: ''
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events: []
    - queryTimeout: '10000'
    - requireConfirmation: false
    - type: POST
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - bodyType: json
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2022-05-10T09:33:34.740Z
folder: new_expense
