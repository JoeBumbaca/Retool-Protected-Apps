id: prop_cost
type: datasource
subtype: RESTQuery
resourceName: ef7019a5-cb7c-4185-9630-efb9e1c122b4
template:
  ordered:
    - queryRefreshTime: ''
    - paginationLimit: ''
    - body: |-
        {
          "minify": true,
          "statements": [
              {
              "statement": "MATCH (p:RealEstateProperty)-->(n:UnderwritingDetails) MATCH (p:RealEstateProperty)-->(h:HUDDetails) OPTIONAL MATCH (p:RealEstateProperty) --> (s:Street) -->(c:City) --> (st:State) RETURN p.ticker AS ticker,toFloat(n.initial_renovation) AS improvement_cost,n.offering_cash_reserves_percent AS offering_cash_reserves_percent,h.contract_price AS contract_price,h.inspection_cost AS inspection_cost,h.appraisal_fee AS appraisal_fee,h.deposit AS deposit,h.closing_date AS closing_date,st.code AS state",
                "type": "read"
              }
          ]
        }
    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - resourceNameOverride: ''
    - runWhenModelUpdates: true
    - paginationPaginationField: ''
    - headers: ''
    - showFailureToaster: true
    - paginationEnabled: false
    - query: ''
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: true
    - cacheKeyTtl: ''
    - cookies: ''
    - metadata: null
    - changesetObject: ''
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - paginationDataField: ''
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: true
    - showUpdateSetValueDynamicallyToggle: true
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data.results[0]
    - events: []
    - queryTimeout: '10000'
    - requireConfirmation: false
    - type: POST
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - bodyType: raw
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2022-04-06T08:43:04.033Z
folder: graph
