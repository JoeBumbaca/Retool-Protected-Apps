id: property_balance
type: datasource
subtype: SqlQueryUnified
resourceName: bd070b5e-3e02-4fbd-b4f3-a519f1f24272
template:
  ordered:
    - queryRefreshTime: ''
    - records: ''
    - lastReceivedFromResourceAt: null
    - databasePasswordOverride: ''
    - queryDisabledMessage: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: 106
    - resourceNameOverride: ''
    - runWhenModelUpdates: true
    - showFailureToaster: true
    - query: >-
        SELECT financial_identity.external_object_id as ticker, SUM(CASE WHEN
        t.sender_financial_connection_id = checking.id THEN
        t.amount_amount::FLOAT * -1 ELSE t.amount_amount::FLOAT END) AS balance
        FROM financial_identity JOIN financial_connection as checking ON
        checking.financial_identity_id = financial_identity.id AND
        checking.primary_use = 'CHECKING'::financialconnectionprimaryuse AND
        checking.inactive = FALSE JOIN "transaction" t ON
        t.sender_financial_connection_id = checking.id OR
        t.receiver_financial_connection_id = checking.id WHERE 
        ((t.receiver_financial_connection_id = checking.id and
        t.transaction_status = 'COMPLETE'::transactionstatus) OR
        (t.sender_financial_connection_id = checking.id and t.transaction_status
        IN ('COMPLETE'::transactionstatus, 'PENDING'::transactionstatus,
        'WAIT'::transactionstatus))) AND financial_identity.external_model_type
        = 'PROPERTY'::externalmodeltype AND t.date_created <= {{date}} GROUP BY
        financial_identity.external_object_id;
    - playgroundQueryUuid: 6361c1f1-ea94-49af-9c7a-4ba04a901bd7
    - playgroundQueryId: 41
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - warningCodes: []
    - data: null
    - recordId: ''
    - retoolVersion: 2.80.18
    - importedQueryInputs:
        ordered:
          - date: '{{new Date()}}'
    - isImported: true
    - showSuccessToaster: true
    - dataArray: []
    - cacheKeyTtl: ''
    - filterBy: ''
    - databaseHostOverride: ''
    - metadata: null
    - editorMode: sql
    - actionType: ''
    - changesetObject: ''
    - shouldUseLegacySql: false
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - databaseNameOverride: ''
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - watchedParams: []
    - enableErrorTransformer: false
    - enableBulkUpdates: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: true
    - showUpdateSetValueDynamicallyToggle: true
    - bulkUpdatePrimaryKey: ''
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events: []
    - tableName: ''
    - queryTimeout: '10000'
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - databaseUsernameOverride: ''
    - shouldEnableBatchQuerying: false
    - doNotThrowOnNoOp: false
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2022-04-12T11:22:46.674Z
folder: api
