id: upload_appraisal_to_s3
type: datasource
subtype: RESTQuery
resourceName: 1b2fcf3b-5591-4034-8eb4-eabf8804c359
template:
  ordered:
    - queryRefreshTime: ''
    - paginationLimit: ''
    - body: >-
        [{"key":"data","value":"{'names': [{{fileInput1.files['0'].name}}],
        'prefix': '{{urlparams.property_ticker}}/', 'bucket_name':
        'landa-managed-properties' }"}]
    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - resourceNameOverride: ''
    - runWhenModelUpdates: false
    - paginationPaginationField: ''
    - headers: ''
    - showFailureToaster: true
    - paginationEnabled: false
    - query: api/admin/create_presigned_url?
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: true
    - cacheKeyTtl: ''
    - cookies: ''
    - metadata: null
    - changesetObject: ''
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - paginationDataField: ''
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: true
    - showUpdateSetValueDynamicallyToggle: true
    - runWhenPageLoads: false
    - transformer: |-
        const retoolFilesToBlob = (fileComponent) => {
          return fileComponent.files.map((meta, index) => {
            let mime = meta.type;
            let fileName = meta.name;
            let encoded = fileComponent.value[index];
            let decoded = atob(encoded);
            let n = decoded.length;
            let u8arr = new Uint8Array(n);
            while(n--) {
              u8arr[n] = decoded.charCodeAt(n);
            }
            return new File([u8arr], fileName, {type: mime});
          })
        };

        let presignedUrl = data.attributes.urls[0];

        let xhr = new XMLHttpRequest();
        xhr.open('PUT', presignedUrl, true);
        xhr.setRequestHeader("Content-Type", "");
        xhr.send(retoolFilesToBlob({{fileInput1}})[0]);
        xhr.onload = (params) => {};
        xhr.onerror = (params) => {};

        return presignedUrl;
    - events:
        - ordered:
            - event: success
            - type: datasource
            - method: trigger
            - pluginId: upload_lease_gql
            - targetId: null
            - params:
                ordered: []
            - waitType: debounce
            - waitMs: '0'
    - queryTimeout: '10000'
    - requireConfirmation: false
    - type: POST
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - bodyType: json
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2022-05-12T10:59:30.354Z
folder: upload_appraisal
