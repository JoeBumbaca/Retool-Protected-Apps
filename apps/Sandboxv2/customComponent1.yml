id: customComponent1
type: widget
subtype: CustomComponentWidget
template:
  ordered:
    - allowTopNavigation: false
    - heightType: fixed
    - allowDownloads: false
    - allowFullscreen: false
    - allowForms: false
    - model: |-
        {
          "displayText": "Clicking the \"Update model\" button below will update the model and change this text.",
          "queryToTrigger": "query1"
        }
    - allowCamera: false
    - allowModals: false
    - allowPopups: false
    - iframeCode: >

        <style>
          @import url('https://rsms.me/inter/inter.css');
          html { font-family: 'Inter', sans-serif; }
          @supports (font-variation-settings: normal) {
            html { font-family: 'Inter var', sans-serif; }
          }

          * {
            font-family: 'Inter', sans-serif;
          }

          body {
            margin: 0;
          }

          #react {
            height: 100%;
            width: 100%;
          }

          .card {
            min-width: 0;
            min-height: 120px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            padding: 12px 24px;
            border-radius: 4px;
            border: 1px solid #cccccc;
            box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            background-color: #ffffff;
          }

          .title-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            line-height: 24px;
          }

          .title {
            font-size: 18px;
            font-weight: 700;
            text-overflow: ellipsis;
            white-space: nowrap;
          }

          .docs-link {
            font-size: 12px;
            font-weight: 500;
            color: #b062bc;
            text-decoration: none;
          }

          .docs-link:hover {
            color: #9846a4;
          }

          .content {
            margin-top: 4px;
            font-size: 12px;
            line-height: 18px;
            font-weight: 400;
            color: #777777;
          }

          .button-container {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-top: 12px;
          }

          .button {
            border: none;
            border-radius: 4px;
            padding: 8px 16px;
            font-weight: 500;
            font-size: 12px;
            cursor: pointer;
            outline: none;
            appearance: none;
            user-select: auto;
          }

          .button--main {
            background-color: #b062bc;
            color: #ffffff;
          }

          .button--main:hover {
            background-color: #9846a4;
          }

          .button--secondary {
            color: #b062bc;
            background-color: white;
            border: 1px solid #b062bc;
          }

          .button--secondary:hover {
            color: #9846a4;
            border: 1px solid #9846a4;
          }
          
          .wave {
          animation-name: wave-animation;  /* Refers to the name of your @keyframes element below */
          animation-duration: 2.5s;        /* Change to speed up or slow down */
          animation-iteration-count: infinite;  /* Never stop waving :) */
          transform-origin: 70% 70%;       /* Pivot around the bottom-left palm */
          display: inline-block;
        }


        @keyframes wave-animation {
            0% { transform: rotate( 0.0deg) }
           10% { transform: rotate(14.0deg) }  /* The following five values can be played with to make the waving more or less extreme */
           20% { transform: rotate(-8.0deg) }
           30% { transform: rotate(14.0deg) }
           40% { transform: rotate(-4.0deg) }
           50% { transform: rotate(10.0deg) }
           60% { transform: rotate( 0.0deg) }  /* Reset for the last half to pause */
          100% { transform: rotate( 0.0deg) }
        }

        </style>


        <!-- You can add any HTML/CSS/JS here. UMD versions are required.

        Keep in mind that Custom Components are sensitive to bundle sizes, so
        try using a

        custom implementation when possible. -->

        <script crossorigin
        src="https://unpkg.com/react@18/umd/react.development.js"></script>

        <script crossorigin
        src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>


        <div id="react"></div>


        <script type="text/babel">
          const MyCustomComponent = ({ triggerQuery, model, modelUpdate }) => (
            <div className="card">
              <p> <span class="wave">üëã</span> </p>

               <h1>Inline hands <span class="wave">üëãüèæ</span> work also!</h1>
              <div className="title-container">
                <div className="title">Custom component</div>
                <a href="https://docs.retool.com/docs/custom-components" className="docs-link">View docs</a>
              </div>
              <div className="content">
                {/* The text below is dynamic and specified by the model. */}
                {model.displayText}
              </div>
              <div className="button-container">
                {/* This button fires a dynamic query (specified in the model) when clicked. */}
                <button
                  className="button button--main"
                  onClick={() => triggerQuery(model.queryToTrigger)}
                >
                  Trigger query
                </button>

                {/* This button updates the model when clicked. */}
                <button
                  className="button button--secondary"
                  onClick={() => modelUpdate({ displayText: 'The body of this text references "model.displayText", which just changed!' })}
                >
                  Update model
                </button>
              </div>
            </div>
          )

          // This is the entrypoint for the React component.
          const ConnectedComponent = Retool.connectReactComponent(MyCustomComponent)
          const container = document.getElementById('react')
          const root = ReactDOM.createRoot(container)
          root.render(<ConnectedComponent />)
        </script>
    - allowMicrophone: false
    - allowSameOrigin: false
    - allowPopupsToEscapeSandbox: false
    - allowPayment: false
    - allowGeolocation: false
style:
  ordered: []
position2:
  position2:
    row: 25.6
    col: 2
    height: 4
    width: 7
createdAt: 2023-04-06T15:03:19.151Z
