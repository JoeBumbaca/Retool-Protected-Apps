id: SyncTinyTenant
type: datasource
subtype: GraphQLQuery
resourceName: GraphQL-WithoutResource
template:
  ordered:
    - queryRefreshTime: ''
    - paginationLimit: ''
    - body: >+
        mutation SyncTinyTenant($fiscal_year_start: Int, $name: String = "",
        $internal_metadata: jsonb, $tablefish_config: jsonb,
        $db2graph_salesforce_config: jsonb, $db2graph_targets_config: jsonb,
        $babelfish_config: jsonb, $tailor_config: jsonb, $argovisor_config:
        jsonb) {
          insert_tenants_one(object: {name: $name, fiscal_year_start: $fiscal_year_start, internal_metadata: $internal_metadata}, on_conflict: {constraint: tenants_pkey, update_columns: [name, fiscal_year_start, internal_metadata]}) {
            tid
            fiscal_year_start
            name
            internal_metadata
          }
          insert_jobs(objects: [{name: "tablefish", config: $tablefish_config}, 
                                {name: "DB2Graph-Salesforce", config: $db2graph_salesforce_config},
                                {name: "DB2Graph-Targets", config: $db2graph_targets_config},
                                {name: "Babelfish", config: $babelfish_config},
                                {name: "Tailor", config: $tailor_config},
                                {name: "argovisor", config: $argovisor_config}],
                                on_conflict: {constraint: jobs_pkey, update_columns: config}) {
            returning {
              tid
              name
              config
            }
          }
        }

    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - servedFromCache: false
    - offlineUserQueryInputs: ''
    - successMessage: ''
    - queryDisabled: >-
        {{ stamp.value == "" || role.value == "" || tenantIdPicker.value == ""
        || !IsStaffRole.data }}
    - playgroundQuerySaveId: latest
    - workflowParams: null
    - resourceNameOverride: ''
    - runWhenModelUpdates: false
    - paginationPaginationField: ''
    - headers: >-
        [{"key":"authorization","value":"Bearer
        {{tokenInput.value}}"},{"key":"x-role","value":"{{role.value}}"},{"key":"x-tenant-id","value":"{{TinyTenant.value}}"}]
    - showFailureToaster: true
    - paginationEnabled: false
    - query: https://api.{{stamp.value}}.sightfull.com/v1/graphql?
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - error: null
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - graphQLVariables: >-
        [{"key":"fiscal_year_start","value":"{{CurrentTenant.data.tenants_by_pk.fiscal_year_start}}"},{"key":"name","value":"{{`Tiny
        ${CurrentTenant.data.tenants_by_pk.name}`}}"},{"key":"internal_metadata","value":"{{
        {is_tiny: true} }}"},{"key":"tablefish_config","value":"{{
        {...GetJobsConfig.data.jobs.find((job) => job.name ==
        \"tablefish\").config, snapshot_schema:
        `tiny_${GetJobsConfig.data.jobs.find((job) => job.name ==
        \"tablefish\").config.snapshot_schema}`, is_tiny_tenant: true}
        }}"},{"key":"db2graph_salesforce_config","value":"{{
        {...GetJobsConfig.data.jobs.find((job) => job.name ==
        \"DB2Graph-Salesforce\").config, schema:
        `tiny_${GetJobsConfig.data.jobs.find((job) => job.name ==
        \"DB2Graph-Salesforce\").config.schema}`}
        }}"},{"key":"db2graph_targets_config","value":"{{
        {...GetJobsConfig.data.jobs.find((job) => job.name ==
        \"DB2Graph-Targets\")?.config}
        }}"},{"key":"babelfish_config","value":"{{
        {...GetJobsConfig.data.jobs.find((job) => job.name ==
        \"Babelfish\").config} }}"},{"key":"tailor_config","value":"{{
        {...GetJobsConfig.data.jobs.find((job) => job.name ==
        \"Tailor\").config, \"tiny_config_path\":
        \"/schemas/default/tiny_config.yaml\"}
        }}"},{"key":"argovisor_config","value":"{{
        {...GetJobsConfig.data.jobs.find((job) => job.name ==
        \"argovisor\").config, \"db2graphConfig\": {\"stepsAppendArgs\":
        GetJobsConfig.data.jobs.find((job) => job.name ==
        \"argovisor\").config[\"db2graphConfig\"][\"stepsAppendArgs\"].filter((arg)
        => [\"-t salesforce\", \"-t targets\"].includes(arg))},
        \"tailorConfig\": {...GetJobsConfig.data.jobs.find((job) => job.name ==
        \"argovisor\").config[\"tailorConfig\"], \"concurrentJobsCount\": \"6\"}
        } }}"}]
    - showSuccessToaster: true
    - cacheKeyTtl: ''
    - requestSentTimestamp: null
    - cookies: ''
    - metadata: null
    - queryRunTime: null
    - changesetObject: ''
    - errorTransformer: >-
        //Use the variables data, metadata, and errors to reference these fields
        from your query's results

        if (Array.isArray(errors) && errors.length > 0) {
          return errors[0].message;
        } else {
          return false
        }
            
    - finished: null
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: null
    - graphQLErrors: null
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - paginationDataField: ''
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events:
        - ordered:
            - event: success
            - type: datasource
            - method: trigger
            - pluginId: CurrentTinyTenant
            - targetId: null
            - params:
                ordered: []
            - waitType: debounce
            - waitMs: '0'
    - queryTimeout: '10000'
    - workflowId: null
    - requireConfirmation: false
    - type: POST
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - bodyType: raw
    - offlineQueryType: None
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2023-04-18T12:10:00.357Z
folder: Tenant
